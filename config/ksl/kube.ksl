version 0.1
namespace kubernetes

import rbac

// This would be templated using ksl intermediate representation based on kinds deployed
// We could also consider using a generic "resource" type instead of a type per kind.

@rbac.add_v2_permission(app:'kubernetes', resource:'pods', verb:'get')
@rbac.add_v2_permission(app:'kubernetes', resource:'pods', verb:'list')
@rbac.add_v2_permission(app:'kubernetes', resource:'pods', verb:'update')
@rbac.add_v2_permission(app:'kubernetes', resource:'configmaps', verb:'get')
@rbac.add_v2_permission(app:'kubernetes', resource:'configmaps', verb:'update')
@rbac.add_v2_permission(app:'kubernetes', resource:'configmaps', verb:'list')
type cluster {
    relation workspace: [ExactlyOne rbac.workspace]
    relation role_binding: [Any rbac.role_binding]

    relation pods_get: role_binding.kubernetes_pods_get or workspace.kubernetes_pods_get
    relation pods_list: role_binding.kubernetes_pods_list or workspace.kubernetes_pods_list
    relation pods_update: role_binding.kubernetes_pods_update or workspace.kubernetes_pods_update
    relation configmaps_get: role_binding.kubernetes_configmaps_get or workspace.kubernetes_configmaps_get
    relation configmaps_update: role_binding.kubernetes_configmaps_update or workspace.kubernetes_configmaps_update
    relation configmaps_list: role_binding.kubernetes_configmaps_list or workspace.kubernetes_configmaps_list
}

type knamespace {
    relation workspace: [ExactlyOne rbac.workspace]
    relation role_binding: [Any rbac.role_binding]
    relation cluster: [ExactlyOne cluster]

    relation pods_get: role_binding.kubernetes_pods_get or workspace.kubernetes_pods_get or cluster.pods_get
    relation pods_list: role_binding.kubernetes_pods_list or workspace.kubernetes_pods_list or cluster.pods_list
    relation pods_update: role_binding.kubernetes_pods_update or workspace.kubernetes_pods_update or cluster.pods_update
    relation configmaps_get: role_binding.kubernetes_configmaps_get or workspace.kubernetes_configmaps_get or cluster.configmaps_get
    relation configmaps_update: role_binding.kubernetes_configmaps_update or workspace.kubernetes_configmaps_update or cluster.configmaps_update
    relation configmaps_list: role_binding.kubernetes_configmaps_list or workspace.kubernetes_configmaps_list or cluster.configmaps_list
}

type configmap {
    relation knamespace: [ExactlyOne knamespace]
    relation resourcename: [ExactlyOne resourcename]
    relation role_binding: [Any rbac.role_binding]

    relation get: role_binding.kubernetes_configmaps_get or knamespace.configmaps_get or resourcename.configmaps_get
    relation update: role_binding.kubernetes_configmaps_update or knamespace.configmaps_update or resourcename.configmaps_update
}

type pod {
    relation knamespace: [ExactlyOne knamespace]
    relation resourcename: [ExactlyOne resourcename]
    relation role_binding: [Any rbac.role_binding]

    relation get: role_binding.kubernetes_pods_get or knamespace.pods_get or resourcename.pods_get
    relation update: role_binding.kubernetes_pods_update or knamespace.pods_update or resourcename.pods_update
}

// Relationships needed to retrive objects during role or binding updates.
type role_binding {
    relation rbac_binding: [Any rbac.role_binding]
}

type role {
    relation role_binding: [Any role_binding]
    relation rbac_binding: role_binding.rbac_binding
}

type resourcename {
    relation role_binding: [Any rbac.role_binding]

    relation configmaps_get: role_binding.kubernetes_configmaps_get
    relation configmaps_update: role_binding.kubernetes_configmaps_update
    relation configmaps_list: role_binding.kubernetes_configmaps_list

    relation pods_get: role_binding.kubernetes_pods_get
    relation pods_update: role_binding.kubernetes_pods_update
    relation pods_list: role_binding.kubernetes_pods_list
}
