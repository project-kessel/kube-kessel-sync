definition kubernetes/cluster {
	permission configmaps_get = t_role_binding->kubernetes_configmaps_get + t_workspace->kubernetes_configmaps_get
	permission configmaps_update = t_role_binding->kubernetes_configmaps_update + t_workspace->kubernetes_configmaps_update
	permission pods_get = t_role_binding->kubernetes_pods_get + t_workspace->kubernetes_pods_get
	permission pods_list = t_role_binding->kubernetes_pods_list + t_workspace->kubernetes_pods_list
	permission pods_update = t_role_binding->kubernetes_pods_update + t_workspace->kubernetes_pods_update
	permission role_binding = t_role_binding
	relation t_role_binding: rbac/role_binding
	permission workspace = t_workspace
	relation t_workspace: rbac/workspace
}

definition kubernetes/configmap {
	permission cluster_resource = t_cluster_resource
	relation t_cluster_resource: kubernetes/configmap
	permission get = t_role_binding->kubernetes_configmaps_get + t_knamespace->configmaps_get + t_cluster_resource->get
	permission knamespace = t_knamespace
	relation t_knamespace: kubernetes/knamespace
	permission role_binding = t_role_binding
	relation t_role_binding: rbac/role_binding
	permission update = t_role_binding->kubernetes_configmaps_update + t_knamespace->configmaps_update + t_cluster_resource->update
}

definition kubernetes/knamespace {
	permission cluster = t_cluster
	relation t_cluster: kubernetes/cluster
	permission configmaps_get = t_role_binding->kubernetes_configmaps_get + t_workspace->kubernetes_configmaps_get + t_cluster->configmaps_get
	permission configmaps_update = t_role_binding->kubernetes_configmaps_update + t_workspace->kubernetes_configmaps_update + t_cluster->configmaps_update
	permission pods_get = t_role_binding->kubernetes_pods_get + t_workspace->kubernetes_pods_get + t_cluster->pods_get
	permission pods_list = t_role_binding->kubernetes_pods_list + t_workspace->kubernetes_pods_list + t_cluster->pods_list
	permission pods_update = t_role_binding->kubernetes_pods_update + t_workspace->kubernetes_pods_update + t_cluster->pods_update
	permission role_binding = t_role_binding
	relation t_role_binding: rbac/role_binding
	permission workspace = t_workspace
	relation t_workspace: rbac/workspace
}

definition kubernetes/pod {
	permission cluster_resource = t_cluster_resource
	relation t_cluster_resource: kubernetes/pod
	permission get = t_role_binding->kubernetes_pods_get + t_knamespace->pods_get + t_cluster_resource->get
	permission knamespace = t_knamespace
	relation t_knamespace: kubernetes/knamespace
	permission role_binding = t_role_binding
	relation t_role_binding: rbac/role_binding
	permission update = t_role_binding->kubernetes_pods_update + t_knamespace->pods_update + t_cluster_resource->update
}

definition kubernetes/role {
	permission rbac_binding = t_role_binding->rbac_binding
	permission role_binding = t_role_binding
	relation t_role_binding: kubernetes/role_binding
}

definition kubernetes/role_binding {
	permission rbac_binding = t_rbac_binding
	relation t_rbac_binding: rbac/role_binding
}

definition rbac/group {
	permission member = t_member
	relation t_member: rbac/principal | rbac/group#member
	permission owner = t_owner
	relation t_owner: rbac/tenant
}

definition rbac/platform {
	permission binding = t_binding
	relation t_binding: rbac/role_binding
	permission kubernetes_configmaps_get = t_binding->kubernetes_configmaps_get
	permission kubernetes_configmaps_update = t_binding->kubernetes_configmaps_update
	permission kubernetes_pods_get = t_binding->kubernetes_pods_get
	permission kubernetes_pods_list = t_binding->kubernetes_pods_list
	permission kubernetes_pods_update = t_binding->kubernetes_pods_update
}

definition rbac/principal {}

definition rbac/role {
	permission all_all_all = t_all_all_all
	relation t_all_all_all: rbac/principal:*
	permission child = t_child
	relation t_child: rbac/role
	permission kubernetes_all_all = t_kubernetes_all_all
	relation t_kubernetes_all_all: rbac/principal:*
	permission kubernetes_all_get = t_kubernetes_all_get
	relation t_kubernetes_all_get: rbac/principal:*
	permission kubernetes_all_list = t_kubernetes_all_list
	relation t_kubernetes_all_list: rbac/principal:*
	permission kubernetes_all_update = t_kubernetes_all_update
	relation t_kubernetes_all_update: rbac/principal:*
	permission kubernetes_configmaps_all = t_kubernetes_configmaps_all
	relation t_kubernetes_configmaps_all: rbac/principal:*
	permission kubernetes_configmaps_get = t_kubernetes_configmaps_get + kubernetes_configmaps_all + kubernetes_all_get + kubernetes_all_all + all_all_all + t_child->kubernetes_configmaps_get
	relation t_kubernetes_configmaps_get: rbac/principal:*
	permission kubernetes_configmaps_update = t_kubernetes_configmaps_update + kubernetes_configmaps_all + kubernetes_all_update + kubernetes_all_all + all_all_all + t_child->kubernetes_configmaps_update
	relation t_kubernetes_configmaps_update: rbac/principal:*
	permission kubernetes_pods_all = t_kubernetes_pods_all
	relation t_kubernetes_pods_all: rbac/principal:*
	permission kubernetes_pods_get = t_kubernetes_pods_get + kubernetes_pods_all + kubernetes_all_get + kubernetes_all_all + all_all_all + t_child->kubernetes_pods_get
	relation t_kubernetes_pods_get: rbac/principal:*
	permission kubernetes_pods_list = t_kubernetes_pods_list + kubernetes_pods_all + kubernetes_all_list + kubernetes_all_all + all_all_all + t_child->kubernetes_pods_list
	relation t_kubernetes_pods_list: rbac/principal:*
	permission kubernetes_pods_update = t_kubernetes_pods_update + kubernetes_pods_all + kubernetes_all_update + kubernetes_all_all + all_all_all + t_child->kubernetes_pods_update
	relation t_kubernetes_pods_update: rbac/principal:*
}

definition rbac/role_binding {
	permission kubernetes_configmaps_get = (subject & t_role->kubernetes_configmaps_get)
	permission kubernetes_configmaps_update = (subject & t_role->kubernetes_configmaps_update)
	permission kubernetes_pods_get = (subject & t_role->kubernetes_pods_get)
	permission kubernetes_pods_list = (subject & t_role->kubernetes_pods_list)
	permission kubernetes_pods_update = (subject & t_role->kubernetes_pods_update)
	permission role = t_role
	relation t_role: rbac/role
	permission subject = t_subject
	relation t_subject: rbac/principal | rbac/group#member
}

definition rbac/tenant {
	permission binding = t_binding
	relation t_binding: rbac/role_binding
	permission kubernetes_configmaps_get = t_binding->kubernetes_configmaps_get + t_platform->kubernetes_configmaps_get
	permission kubernetes_configmaps_update = t_binding->kubernetes_configmaps_update + t_platform->kubernetes_configmaps_update
	permission kubernetes_pods_get = t_binding->kubernetes_pods_get + t_platform->kubernetes_pods_get
	permission kubernetes_pods_list = t_binding->kubernetes_pods_list + t_platform->kubernetes_pods_list
	permission kubernetes_pods_update = t_binding->kubernetes_pods_update + t_platform->kubernetes_pods_update
	permission platform = t_platform
	relation t_platform: rbac/platform
}

definition rbac/workspace {
	permission binding = t_binding
	relation t_binding: rbac/role_binding
	permission kubernetes_configmaps_get = t_binding->kubernetes_configmaps_get + t_parent->kubernetes_configmaps_get
	permission kubernetes_configmaps_update = t_binding->kubernetes_configmaps_update + t_parent->kubernetes_configmaps_update
	permission kubernetes_pods_get = t_binding->kubernetes_pods_get + t_parent->kubernetes_pods_get
	permission kubernetes_pods_list = t_binding->kubernetes_pods_list + t_parent->kubernetes_pods_list
	permission kubernetes_pods_update = t_binding->kubernetes_pods_update + t_parent->kubernetes_pods_update
	permission parent = t_parent
	relation t_parent: rbac/workspace | rbac/tenant
}